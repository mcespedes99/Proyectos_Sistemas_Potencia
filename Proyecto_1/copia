for i in 2:6
  for j in 2:6
    if i==j
      for k in 1:6
        J[i-1,j-1] += -X[1,i]*(X[1,k]*(real(matriz[i,k])*sin(X[2,i]-X[2,k])-imag(matriz[i,k])*cos(X[2,i]-X[2,k]))-X[1,i]^2 * imag(matriz[i,i]))
      end
    else
      J[i-1,j-1] = X[1,i]*X[1,j]*(real(matriz[i,j])*sin(X[2,i]-X[2,j]) - imag(matriz[i,j])*cos(X[2,i]-X[2,j]))
    end
  end
end

# A continuación se añade la submatriz dP/dV que es de 5x3
for i in 2:6
  for j in 4:6
    if i==j
      for k in 1:6
        J[i-1,j-1+5] += X[1,k]*(real(matriz[i,k])*cos(X[2,i]-X[2,k])+imag(matriz[i,k])*sin(X[2,i]-X[2,k])) + X[1,i]*real(matriz[i,i])
      end
    else
      J[i-1,j-1+5] = X[1,i]*(real(matriz[i,j])*cos(X[2,i]-X[2,j]) + imag(matriz[i,j])*sin(X[2,i]-X[2,j]))
    end
  end
end

# Como tercer punto, de añade la submatriz dQ/d_cita que es 3x5
for i in 4:6
  for j in 2:6
    if i==j
      for k in 1:6
        J[i-1+5,j-1] += X[1,i]*(X[1,k]*(real(matriz[i,k])*cos(X[2,i]-X[2,k])+imag(matriz[i,k])*sin(X[2,i]-X[2,k])) - X[1,i]^2 *real(matriz[i,i]))
      end
    else
      J[i-1+5,j-1] = -X[1,i]*X[1,j]*(real(matriz[i,j])*cos(X[2,i]-X[2,j]) + imag(matriz[i,j])*sin(X[2,i]-X[2,j]))
    end
  end
end

#Por último, se añade la submatriz dQ/dV que es 3x3
for i in 4:6
  for j in 4:6
    if i==j
      for k in 1:6
        J[i-1+5,j-1+5] += X[1,k]*(real(matriz[i,k])*sin(X[2,i]-X[2,k])-imag(matriz[i,k])*cos(X[2,i]-X[2,k])) - X[1,i]*imag(matriz[i,i])
      end
    else
      J[i-1+5,j-1+5] = X[1,i]*(real(matriz[i,j])*sin(X[2,i]-X[2,j]) - imag(matriz[i,j])*cos(X[2,i]-X[2,j]))
    end
  end
end
#Fin del Jacobiano

vector_missmatch = zeros(8) #Definición del vector de missmatch

for j = 2:6
  if j < 4
    for i in 1:barras 
      vector_missmatch[j-1] += X[1,i]*X[1,j]*(real(matriz[j,i])*cos(X[2,j]-X[2,i])+imag(matriz[j,1])*sin(X[2,j]-X[2,i])) - Pbarras[j]
    end
  elseif j == 4
    for i in 1:barras 
      vector_missmatch[j-1] += X[1,i]*X[1,j]*(real(matriz[j,i])*cos(X[2,j]-X[2,i])+imag(matriz[j,1])*sin(X[2,j]-X[2,i])) - Pbarras[j]
    end

    for i in 1:barras 
      vector_missmatch[j+2] += X[1,i]*X[1,j]*(real(matriz[j,i])*sin(X[2,j]-X[2,i])+imag(matriz[j,1])*cos(X[2,j]-X[2,i])) - Qbarras[j]
    end

  else
    for i in 1:barras 
      vector_missmatch[j-1] += X[1,i]*X[1,j]*(real(matriz[j,i])*cos(X[2,j]-X[2,i])+imag(matriz[j,1])*sin(X[2,j]-X[2,i])) - Pbarras[j]
    end
    for i in 1:barras 
      vector_missmatch[j+2] += X[1,i]*X[1,j]*(real(matriz[j,i])*sin(X[2,j]-X[2,i])+imag(matriz[j,1])*cos(X[2,j]-X[2,i])) - Qbarras[j]
    end
  end
end



# 3. Cálculo del Jacobiano para la iteración correspondiente:
  J = zeros(8,8)

  # Primero se agrega la submatriz de dP/d_cita que es 5x5
  for i = 2:6
    for j = 2:6
      if i==j
        for k = 1:6
          J[i-1,j-1] += -X[1,i]*(X[1,k]*(real(matriz[i,k])*sin(X[2,i]-X[2,k])-imag(matriz[i,k])*cos(X[2,i]-X[2,k]))-X[1,i]^2 * imag(matriz[i,i]))
        end
      else
        J[i-1,j-1] = X[1,i]*X[1,j]*(real(matriz[i,j])*sin(X[2,i]-X[2,j]) - imag(matriz[i,j])*cos(X[2,i]-X[2,j]))
      end
    end
  end

  # A continuación se añade la submatriz dP/dV que es de 5x3
  for i = 2:6
    for j = 4:6
      if i==j
        for k = 1:6
          J[i-1,j-1+3] += X[1,k]*(real(matriz[i,k])*cos(X[2,i]-X[2,k])+imag(matriz[i,k])*sin(X[2,i]-X[2,k])) + X[1,i]*real(matriz[i,i])
        end
      else
        J[i-1,j-1+3] = X[1,i]*(real(matriz[i,j])*cos(X[2,i]-X[2,j]) + imag(matriz[i,j])*sin(X[2,i]-X[2,j]))
      end
    end
  end

  # Como tercer punto, de añade la submatriz dQ/d_cita que es 3x5
  for i = 4:6
    for j = 2:6
      if i==j
        for k in 1:6
          J[i-1+3,j-1] += X[1,i]*(X[1,k]*(real(matriz[i,k])*cos(X[2,i]-X[2,k])+imag(matriz[i,k])*sin(X[2,i]-X[2,k])) - X[1,i]^2 *real(matriz[i,i]))
        end
      else
        J[i-1+3,j-1] = -X[1,i]*X[1,j]*(real(matriz[i,j])*cos(X[2,i]-X[2,j]) + imag(matriz[i,j])*sin(X[2,i]-X[2,j]))
      end
    end
  end

  #Por último, se añade la submatriz dQ/dV que es 3x3
  for i = 4:6
    for j = 4:6
      if i==j
        for k = 1:6
          J[i-1+3,j-1+3] += X[1,k]*(real(matriz[i,k])*sin(X[2,i]-X[2,k])-imag(matriz[i,k])*cos(X[2,i]-X[2,k])) - X[1,i]*imag(matriz[i,i])
        end
      else
        J[i-1+3,j-1+3] = X[1,i]*(real(matriz[i,j])*sin(X[2,i]-X[2,j]) - imag(matriz[i,j])*cos(X[2,i]-X[2,j]))
      end
    end
  end
  #Fin del Jacobiano